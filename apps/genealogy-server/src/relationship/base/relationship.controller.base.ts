/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RelationshipService } from "../relationship.service";
import { RelationshipCreateInput } from "./RelationshipCreateInput";
import { Relationship } from "./Relationship";
import { RelationshipFindManyArgs } from "./RelationshipFindManyArgs";
import { RelationshipWhereUniqueInput } from "./RelationshipWhereUniqueInput";
import { RelationshipUpdateInput } from "./RelationshipUpdateInput";

export class RelationshipControllerBase {
  constructor(protected readonly service: RelationshipService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Relationship })
  async createRelationship(
    @common.Body() data: RelationshipCreateInput
  ): Promise<Relationship> {
    return await this.service.createRelationship({
      data: data,
      select: {
        createdAt: true,
        id: true,
        personA: true,
        personB: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Relationship] })
  @ApiNestedQuery(RelationshipFindManyArgs)
  async relationships(@common.Req() request: Request): Promise<Relationship[]> {
    const args = plainToClass(RelationshipFindManyArgs, request.query);
    return this.service.relationships({
      ...args,
      select: {
        createdAt: true,
        id: true,
        personA: true,
        personB: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Relationship })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async relationship(
    @common.Param() params: RelationshipWhereUniqueInput
  ): Promise<Relationship | null> {
    const result = await this.service.relationship({
      where: params,
      select: {
        createdAt: true,
        id: true,
        personA: true,
        personB: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Relationship })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRelationship(
    @common.Param() params: RelationshipWhereUniqueInput,
    @common.Body() data: RelationshipUpdateInput
  ): Promise<Relationship | null> {
    try {
      return await this.service.updateRelationship({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          personA: true,
          personB: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Relationship })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRelationship(
    @common.Param() params: RelationshipWhereUniqueInput
  ): Promise<Relationship | null> {
    try {
      return await this.service.deleteRelationship({
        where: params,
        select: {
          createdAt: true,
          id: true,
          personA: true,
          personB: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
