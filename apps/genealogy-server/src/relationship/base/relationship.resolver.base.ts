/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Relationship } from "./Relationship";
import { RelationshipCountArgs } from "./RelationshipCountArgs";
import { RelationshipFindManyArgs } from "./RelationshipFindManyArgs";
import { RelationshipFindUniqueArgs } from "./RelationshipFindUniqueArgs";
import { CreateRelationshipArgs } from "./CreateRelationshipArgs";
import { UpdateRelationshipArgs } from "./UpdateRelationshipArgs";
import { DeleteRelationshipArgs } from "./DeleteRelationshipArgs";
import { RelationshipService } from "../relationship.service";
@graphql.Resolver(() => Relationship)
export class RelationshipResolverBase {
  constructor(protected readonly service: RelationshipService) {}

  async _relationshipsMeta(
    @graphql.Args() args: RelationshipCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Relationship])
  async relationships(
    @graphql.Args() args: RelationshipFindManyArgs
  ): Promise<Relationship[]> {
    return this.service.relationships(args);
  }

  @graphql.Query(() => Relationship, { nullable: true })
  async relationship(
    @graphql.Args() args: RelationshipFindUniqueArgs
  ): Promise<Relationship | null> {
    const result = await this.service.relationship(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Relationship)
  async createRelationship(
    @graphql.Args() args: CreateRelationshipArgs
  ): Promise<Relationship> {
    return await this.service.createRelationship({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Relationship)
  async updateRelationship(
    @graphql.Args() args: UpdateRelationshipArgs
  ): Promise<Relationship | null> {
    try {
      return await this.service.updateRelationship({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Relationship)
  async deleteRelationship(
    @graphql.Args() args: DeleteRelationshipArgs
  ): Promise<Relationship | null> {
    try {
      return await this.service.deleteRelationship(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
